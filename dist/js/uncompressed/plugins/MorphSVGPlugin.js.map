{"version":3,"sources":["uncompressed/plugins/MorphSVGPlugin.js"],"names":["_gsScope","module","exports","global","window","_gsQueue","push","_PI","Math","PI","_DEG2RAD","_svgPathExp","_numbersExp","_selectorExp","_commands","_scientific","_atan2","atan2","_cos","cos","_sin","sin","_sqrt","sqrt","_2PI","_angleMin","_angleMax","_lastLinkedAnchor","TweenLite","_gsDefine","globals","_log","message","console","log","_arcToBeziers","lastX","lastY","rx","ry","angle","largeArcFlag","sweepFlag","x","y","abs","angleRad","cosAngle","sinAngle","dx2","dy2","x1","y1","x1_sq","y1_sq","radiiCheck","rx_sq","ry_sq","sq","coef","cx1","cy1","sx2","sy2","cx","cy","ux","uy","vx","vy","temp","angleStart","acos","angleExtent","segments","ceil","rawPath","angleIncrement","controlLength","ma","mb","mc","md","i","length","_stringToRawPath","d","a","replace","m","n","match","path","relativeX","relativeY","twoThirds","elements","points","errorMessage","line","sx","sy","ex","ey","difX","difY","segment","j","command","isRelative","startX","startY","beziers","prevCommand","isNaN","toUpperCase","closed","totalPoints","_subdivideSegment","quantity","tally","max","l","newPointsPerSegment","ax","ay","cp1x","cp1y","cp2x","cp2y","bx","by","x2","y2","t","floor","splice","_rawPathToString","precision","s","space","rnd","pow","_reverseBezier","reversed","_getAverageXY","_getSize","xMax","xMin","yMax","yMin","centerX","centerY","size","_getTotalSize","samplesPerBezier","inc","k","inv","x3","x4","y3","y4","left","width","top","height","_sortByComplexity","b","_sortBySize","sizeA","sizeB","_offsetSegment","shapeIndex","slice","wrap","index","_getTotalMovement","sb","eb","offsetX","offsetY","_getClosestShapeIndex","checkReverse","sCenter","eCenter","min","minIndex","copy","_getClosestAnchor","bezier","closestDistance","closestX","closestY","dx","dy","_getClosestSegment","pool","startIndex","sortRatio","minSize","_equalizeSegmentQuantity","start","end","map","fillSafe","dif","longer","shorter","added","sortMethod","shapeIndices","reverse","sort","join","_pathFilter","precompile","_offsetPoints","text","offset","parseInt","_equalizePointQuantity","parseFloat","factor","nextX","nextY","toFixed","_pointsFilter","startNums","endNums","_buildPointsFilter","_createPath","e","ignore","document","createElementNS","attr","Array","prototype","call","attributes","name","nodeName","toLowerCase","indexOf","setAttributeNS","nodeValue","_typeAttrs","rect","circle","ellipse","_attrToObj","attrs","props","split","obj","getAttribute","_convertToPath","swap","type","tagName","circ","data","r","rcirc","rycirc","w","h","x5","x6","y5","y6","getBBox","shift","setAttribute","_gsRawPath","parentNode","insertBefore","removeChild","_parseShape","shape","forcePath","target","isString","test","selector","getAttributeNS","_populateSmoothData","tolerance","limit","smooth","a2","isSmooth","smoothData","_parseOriginFactors","v","trim","_shortAngle","_morphMessage","MorphSVGPlugin","plugin","propName","API","version","overwriteProps","init","value","tween","cs","nodeType","getComputedStyle","fill","fillRule","origins","origin","p","pt","isPoly","startSmooth","endSmooth","startSeg","endSeg","precompiled","sData","eData","originFactors","useRotation","prop","defaultMap","_prop","_render","render","defaultRender","_apply","updateTarget","defaultUpdateTarget","_rnd","_tween","_target","defaultType","smoothTolerance","_origin","_eOrigin","_rawPath","_controlPT","_next","l1s","l1c","l2s","l2c","_tweenRotation","_addTween","_overwriteProps","endProp","set","ratio","controlPT","anchorPT","_anchorPT","easeInOut","_super","setRatio","_firstPT","sa","ca","sl","cl","linkedPT","so","eo","angleDif","short","pathFilter","pointsFilter","getTotalSize","subdivideRawBezier","subdivideSegment","rawPathToString","stringToRawPath","pathDataToRawBezier","equalizeSegmentQuantity","convertToPath","targets","pathDataToBezier","vars","prefix","matrix","bbox","align","relative","pop","getGlobal","GreenSockGlobals","require","define","amd"],"mappings":"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","sourcesContent":["/*!\n * VERSION: 0.9.1\n * DATE: 2019-02-21\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * MorphSVGPlugin is a Club GreenSock membership benefit; You must have a valid membership to use\n * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.\n * This work is subject to the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\nvar _gsScope = (typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node\n(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {\n\n\t\"use strict\";\n\n\n\tvar _PI = Math.PI,\n\t\t_DEG2RAD = _PI / 180,\n\t\t_svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t_numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t_selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/gi,\n\t\t_commands = /[achlmqstvz]/ig,\n\t\t_scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n\t\t_atan2 = Math.atan2,\n\t\t_cos = Math.cos,\n\t\t_sin = Math.sin,\n\t\t_sqrt = Math.sqrt,\n\t\t_2PI = _PI * 2,\n\t\t_angleMin = _PI * 0.3,\n\t\t_angleMax = _PI * 0.7,\n\t\t_lastLinkedAnchor,\n\t\tTweenLite = _gsScope._gsDefine.globals.TweenLite,\n\n\t\t_log = function(message) {\n\t\t\tif (_gsScope.console) {\n\t\t\t\tconsole.log(message);\n\t\t\t}\n\t\t},\n\n\t\t// translates SVG arc data into an array of cubic beziers\n\t\t_arcToBeziers = function(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n\t\t\tif (lastX === x && lastY === y) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trx = Math.abs(rx);\n\t\t\try = Math.abs(ry);\n\t\t\tvar angleRad = (angle % 360) * _DEG2RAD,\n\t\t\t\tcosAngle = _cos(angleRad),\n\t\t\t\tsinAngle = _sin(angleRad),\n\t\t\t\tdx2 = (lastX - x) / 2,\n\t\t\t\tdy2 = (lastY - y) / 2,\n\t\t\t\tx1 = (cosAngle * dx2 + sinAngle * dy2),\n\t\t\t\ty1 = (-sinAngle * dx2 + cosAngle * dy2),\n\t\t\t\tx1_sq = x1 * x1,\n\t\t\t\ty1_sq = y1 * y1,\n\t\t\t\tradiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\t\t\tif (radiiCheck > 1) {\n\t\t\t\trx = _sqrt(radiiCheck) * rx;\n\t\t\t\try = _sqrt(radiiCheck) * ry;\n\t\t\t}\n\t\t\tvar rx_sq = rx * rx,\n\t\t\t\try_sq = ry * ry,\n\t\t\t\tsq = ((rx_sq * ry_sq) - (rx_sq * y1_sq) - (ry_sq * x1_sq)) / ((rx_sq * y1_sq) + (ry_sq * x1_sq));\n\t\t\tif (sq < 0) {\n\t\t\t\tsq = 0;\n\t\t\t}\n\t\t\tvar coef = ((largeArcFlag === sweepFlag) ? -1 : 1) * _sqrt(sq),\n\t\t\t\tcx1 = coef * ((rx * y1) / ry),\n\t\t\t\tcy1 = coef * -((ry * x1) / rx),\n\t\t\t\tsx2 = (lastX + x) / 2,\n\t\t\t\tsy2 = (lastY + y) / 2,\n\t\t\t\tcx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n\t\t\t\tcy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n\t\t\t\tux = (x1 - cx1) / rx,\n\t\t\t\tuy = (y1 - cy1) / ry,\n\t\t\t\tvx = (-x1 - cx1) / rx,\n\t\t\t\tvy = (-y1 - cy1) / ry,\n\t\t\t\ttemp = ux * ux + uy * uy,\n\t\t\t\tangleStart = ((uy < 0) ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n\t\t\t\tangleExtent = ((ux * vy - uy * vx < 0) ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\t\t\tif (!sweepFlag && angleExtent > 0) {\n\t\t\t\tangleExtent -= _2PI;\n\t\t\t} else if (sweepFlag && angleExtent < 0) {\n\t\t\t\tangleExtent += _2PI;\n\t\t\t}\n\t\t\tangleStart %= _2PI;\n\t\t\tangleExtent %= _2PI;\n\t\t\tvar segments = Math.ceil(Math.abs(angleExtent) / (_2PI / 4)),\n\t\t\t\trawPath = [],\n\t\t\t\tangleIncrement = angleExtent / segments,\n\t\t\t\tcontrolLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n\t\t\t\tma = cosAngle * rx,\n\t\t\t\tmb = sinAngle * rx,\n\t\t\t\tmc = sinAngle * -ry,\n\t\t\t\tmd = cosAngle * ry,\n\t\t\t\ti;\n\t\t\tfor (i = 0; i < segments; i++) {\n\t\t\t\tangle = angleStart + i * angleIncrement;\n\t\t\t\tx1 = _cos(angle);\n\t\t\t\ty1 = _sin(angle);\n\t\t\t\tux = _cos(angle += angleIncrement);\n\t\t\t\tuy = _sin(angle);\n\t\t\t\trawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n\t\t\t}\n\t\t\t//now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).\n\t\t\tfor (i = 0; i < rawPath.length; i+=2) {\n\t\t\t\tx1 = rawPath[i];\n\t\t\t\ty1 = rawPath[i+1];\n\t\t\t\trawPath[i] = x1 * ma + y1 * mc + cx;\n\t\t\t\trawPath[i+1] = x1 * mb + y1 * md + cy;\n\t\t\t}\n\t\t\trawPath[i-2] = x; //always set the end to exactly where it's supposed to be\n\t\t\trawPath[i-1] = y;\n\t\t\treturn rawPath;\n\t\t},\n\n\t\t//Spits back an array of cubic Bezier segments that use absolute coordinates. Each segment starts with a \"moveTo\" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.\n\t\t_stringToRawPath = function(d) {\n\t\t\tvar a = (d + \"\").replace(_scientific, function(m) { var n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n\t\t\t\tpath = [],\n\t\t\t\trelativeX = 0,\n\t\t\t\trelativeY = 0,\n\t\t\t\ttwoThirds = 2 / 3,\n\t\t\t\telements = a.length,\n\t\t\t\tpoints = 0,\n\t\t\t\terrorMessage = \"ERROR: malformed path: \" + d,\n\t\t\t\tline = function(sx, sy, ex, ey) {\n\t\t\t\t\tdifX = (ex - sx) / 3;\n\t\t\t\t\tdifY = (ey - sy) / 3;\n\t\t\t\t\tsegment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n\t\t\t\t},\n\t\t\t\ti, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand;\n\t\t\tif (!d || !isNaN(a[0]) || isNaN(a[1])) {\n\t\t\t\t_log(errorMessage);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tfor (i = 0; i < elements; i++) {\n\t\t\t\tprevCommand = command;\n\t\t\t\tif (isNaN(a[i])) {\n\t\t\t\t\tcommand = a[i].toUpperCase();\n\t\t\t\t\tisRelative = (command !== a[i]); //lower case means relative\n\t\t\t\t} else { //commands like \"C\" can be strung together without any new command characters between.\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\tx = +a[i + 1];\n\t\t\t\ty = +a[i + 2];\n\t\t\t\tif (isRelative) {\n\t\t\t\t\tx += relativeX;\n\t\t\t\t\ty += relativeY;\n\t\t\t\t}\n\t\t\t\tif (!i) {\n\t\t\t\t\tstartX = x;\n\t\t\t\t\tstartY = y;\n\t\t\t\t}\n\n\t\t\t\t// \"M\" (move)\n\t\t\t\tif (command === \"M\") {\n\t\t\t\t\tif (segment) {\n\t\t\t\t\t\tif (segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n\t\t\t\t\t\t\tpath.length -= 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpoints += segment.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trelativeX = startX = x;\n\t\t\t\t\trelativeY = startY = y;\n\t\t\t\t\tsegment = [x, y];\n\t\t\t\t\tpath.push(segment);\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcommand = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n\n\t\t\t\t// \"C\" (cubic bezier)\n\t\t\t\t} else if (command === \"C\") {\n\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\tsegment = [0, 0];\n\t\t\t\t\t}\n\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t}\n\t\t\t\t\t//note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\t\t\t\t\tsegment.push(x,\ty, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, (relativeX += a[i + 5] * 1),\t(relativeY += a[i + 6] * 1));\n\t\t\t\t\ti += 6;\n\n\t\t\t\t// \"S\" (continuation of cubic bezier)\n\t\t\t\t} else if (command === \"S\") {\n\t\t\t\t\tdifX = relativeX;\n\t\t\t\t\tdifY = relativeY;\n\t\t\t\t\tif (prevCommand === \"C\" || prevCommand === \"S\") {\n\t\t\t\t\t\tdifX += relativeX - segment[segment.length - 4];\n\t\t\t\t\t\tdifY += relativeY - segment[segment.length - 3];\n\t\t\t\t\t}\n\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t}\n\t\t\t\t\tsegment.push(difX, difY, x,\ty, (relativeX += a[i + 3] * 1), (relativeY += a[i + 4] * 1));\n\t\t\t\t\ti += 4;\n\n\t\t\t\t// \"Q\" (quadratic bezier)\n\t\t\t\t} else if (command === \"Q\") {\n\t\t\t\t\tdifX = relativeX + (x - relativeX) * twoThirds;\n\t\t\t\t\tdifY = relativeY + (y - relativeY) * twoThirds;\n\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t}\n\t\t\t\t\trelativeX += a[i + 3] * 1;\n\t\t\t\t\trelativeY += a[i + 4] * 1;\n\t\t\t\t\tsegment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n\t\t\t\t\ti += 4;\n\n\t\t\t\t// \"T\" (continuation of quadratic bezier)\n\t\t\t\t} else if (command === \"T\") {\n\t\t\t\t\tdifX = relativeX - segment[segment.length - 4];\n\t\t\t\t\tdifY = relativeY - segment[segment.length - 3];\n\t\t\t\t\tsegment.push(relativeX + difX, relativeY + difY, x + ((relativeX + difX * 1.5) - x) * twoThirds, y + ((relativeY + difY * 1.5) - y) * twoThirds, (relativeX = x), (relativeY = y));\n\t\t\t\t\ti += 2;\n\n\t\t\t\t// \"H\" (horizontal line)\n\t\t\t\t} else if (command === \"H\") {\n\t\t\t\t\tline(relativeX, relativeY, (relativeX = x), relativeY);\n\t\t\t\t\ti += 1;\n\n\t\t\t\t// \"V\" (vertical line)\n\t\t\t\t} else if (command === \"V\") {\n\t\t\t\t\t//adjust values because the first (and only one) isn't x in this case, it's y.\n\t\t\t\t\tline(relativeX, relativeY, relativeX, (relativeY = x + (isRelative ? relativeY - relativeX : 0)));\n\t\t\t\t\ti += 1;\n\n\t\t\t\t// \"L\" (line) or \"Z\" (close)\n\t\t\t\t} else if (command === \"L\" || command === \"Z\") {\n\t\t\t\t\tif (command === \"Z\") {\n\t\t\t\t\t\tx = startX;\n\t\t\t\t\t\ty = startY;\n\t\t\t\t\t\tsegment.closed = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (command === \"L\" || Math.abs(relativeX - x) > 0.5 || Math.abs(relativeY - y) > 0.5) {\n\t\t\t\t\t\tline(relativeX, relativeY, x, y);\n\t\t\t\t\t\tif (command === \"L\") {\n\t\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trelativeX = x;\n\t\t\t\t\trelativeY = y;\n\n\t\t\t\t// \"A\" (arc)\n\t\t\t\t} else if (command === \"A\") {\n\t\t\t\t\tbeziers = _arcToBeziers(relativeX, relativeY, +a[i+1], +a[i+2], +a[i+3], +a[i+4], +a[i+5], (isRelative ? relativeX : 0) + a[i+6]*1, (isRelative ? relativeY : 0) + a[i+7]*1);\n\t\t\t\t\tif (beziers) {\n\t\t\t\t\t\tfor (j = 0; j < beziers.length; j++) {\n\t\t\t\t\t\t\tsegment.push(beziers[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trelativeX = segment[segment.length-2];\n\t\t\t\t\trelativeY = segment[segment.length-1];\n\t\t\t\t\ti += 7;\n\n\t\t\t\t} else {\n\t\t\t\t\t_log(errorMessage);\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = segment.length;\n\t\t\tif (segment[0] === segment[i-2] && segment[1] === segment[i-1]) {\n\t\t\t\tsegment.closed = true;\n\t\t\t}\n\t\t\tpath.totalPoints = points + i;\n\t\t\treturn path;\n\t\t},\n\n\t\t//adds a certain number of Beziers while maintaining the path shape (so that the start/end values can have a matching quantity of points to animate). Only pass in ONE segment of the Bezier at a time. Format: [xAnchor, yAnchor, xControlPoint1, yControlPoint1, xControlPoint2, yControlPoint2, xAnchor, yAnchor, xControlPoint1, etc...]\n\t\t_subdivideSegment = function(segment, quantity) {\n\t\t\tvar tally = 0,\n\t\t\t\tmax = 0.999999,\n\t\t\t\tl = segment.length,\n\t\t\t\tnewPointsPerSegment = quantity / ((l - 2) / 6),\n\t\t\t\tax, ay, cp1x, cp1y, cp2x, cp2y, bx, by,\n\t\t\t\tx1, y1, x2, y2, i, t;\n\t\t\tfor (i = 2; i < l; i += 6) {\n\t\t\t\ttally += newPointsPerSegment;\n\t\t\t\twhile (tally > max) { //compare with 0.99999 instead of 1 in order to prevent rounding errors\n\t\t\t\t\tax = segment[i-2];\n\t\t\t\t\tay = segment[i-1];\n\t\t\t\t\tcp1x = segment[i];\n\t\t\t\t\tcp1y = segment[i+1];\n\t\t\t\t\tcp2x = segment[i+2];\n\t\t\t\t\tcp2y = segment[i+3];\n\t\t\t\t\tbx = segment[i+4];\n\t\t\t\t\tby = segment[i+5];\n\t\t\t\t\tt = 1 / ((Math.floor(tally) || 1) + 1); //progress along the bezier (value between 0 and 1)\n\t\t\t\t\tx1 = ax + (cp1x - ax) * t;\n\t\t\t\t\tx2 = cp1x + (cp2x - cp1x) * t;\n\t\t\t\t\tx1 += (x2 - x1) * t;\n\t\t\t\t\tx2 += ((cp2x + (bx - cp2x) * t) - x2) * t;\n\n\t\t\t\t\ty1 = ay + (cp1y - ay) * t;\n\t\t\t\t\ty2 = cp1y + (cp2y - cp1y) * t;\n\t\t\t\t\ty1 += (y2 - y1) * t;\n\t\t\t\t\ty2 += ((cp2y + (by - cp2y) * t) - y2) * t;\n\n\t\t\t\t\tsegment.splice(i, 4,\n\t\t\t\t\t\tax + (cp1x - ax) * t,   //first control point\n\t\t\t\t\t\tay + (cp1y - ay) * t,\n\t\t\t\t\t\tx1,                     //second control point\n\t\t\t\t\t\ty1,\n\t\t\t\t\t\tx1 + (x2 - x1) * t,     //new fabricated anchor on line\n\t\t\t\t\t\ty1 + (y2 - y1) * t,\n\t\t\t\t\t\tx2,                     //third control point\n\t\t\t\t\t\ty2,\n\t\t\t\t\t\tcp2x + (bx - cp2x) * t, //fourth control point\n\t\t\t\t\t\tcp2y + (by - cp2y) * t\n\t\t\t\t\t);\n\t\t\t\t\ti += 6;\n\t\t\t\t\tl += 6;\n\t\t\t\t\ttally--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn segment;\n\t\t},\n\t\t_rawPathToString = function(rawPath, precision) {\n\t\t\tvar s = \"\",\n\t\t\t\tspace = \" \",\n\t\t\t\tl = rawPath.length,\n\t\t\t\trnd = Math.pow(10, precision || 2),\n\t\t\t\ti, j, segment;\n\t\t\tfor (j = 0; j < rawPath.length; j++) {\n\t\t\t\tsegment = rawPath[j];\n\t\t\t\tl = segment.length;\n\t\t\t\ts += \"M\" + (((segment[0] * rnd) | 0) / rnd) + space + (((segment[1] * rnd) | 0) / rnd) + \" C\";\n\t\t\t\tfor (i = 2; i < l; i++) { //this is actually faster than just doing a join() on the array, possibly because the numbers have so many decimal places\n\t\t\t\t\ts += (((segment[i] * rnd) | 0) / rnd) + space;\n\t\t\t\t}\n\t\t\t\tif (segment.closed) {\n\t\t\t\t\ts += \"z\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t_reverseBezier = function(segment) {\n\t\t\tvar a = [],\n\t\t\t\ti = segment.length - 1,\n\t\t\t\tl = 0;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[l++] = segment[i];\n\t\t\t\ta[l++] = segment[i+1];\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tsegment[i] = a[i];\n\t\t\t}\n\t\t\tsegment.reversed = !segment.reversed;\n\t\t},\n\t\t_getAverageXY = function(segment) {\n\t\t\tvar l = segment.length,\n\t\t\t\tx = 0,\n\t\t\t\ty = 0,\n\t\t\t\ti;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tx += segment[i++];\n\t\t\t\ty += segment[i];\n\t\t\t}\n\t\t\treturn [x / (l / 2), y / (l / 2)];\n\t\t},\n\t\t_getSize = function(segment) { //rough estimate of the bounding box (based solely on the anchors) of a single segment. sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n\t\t\tvar l = segment.length,\n\t\t\t\txMax = segment[0],\n\t\t\t\txMin = xMax,\n\t\t\t\tyMax = segment[1],\n\t\t\t\tyMin = yMax,\n\t\t\t\tx, y, i;\n\t\t\tfor (i = 6; i < l; i+=6) {\n\t\t\t\tx = segment[i];\n\t\t\t\ty = segment[i+1];\n\t\t\t\tif (x > xMax) {\n\t\t\t\t\txMax = x;\n\t\t\t\t} else if (x < xMin) {\n\t\t\t\t\txMin = x;\n\t\t\t\t}\n\t\t\t\tif (y > yMax) {\n\t\t\t\t\tyMax = y;\n\t\t\t\t} else if (y < yMin) {\n\t\t\t\t\tyMin = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsegment.centerX = (xMax + xMin) / 2;\n\t\t\tsegment.centerY = (yMax + yMin) / 2;\n\t\t\treturn (segment.size = (xMax - xMin) * (yMax - yMin));\n\t\t},\n\t\t_getTotalSize = function(rawPath, samplesPerBezier) { //rough estimate of the bounding box of the entire list of Bezier segments (based solely on the anchors). sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n\t\t\tsamplesPerBezier = samplesPerBezier || 3;\n\t\t\tvar j = rawPath.length,\n\t\t\t\txMax = rawPath[0][0],\n\t\t\t\txMin = xMax,\n\t\t\t\tyMax = rawPath[0][1],\n\t\t\t\tyMin = yMax,\n\t\t\t\tinc = 1 / samplesPerBezier,\n\t\t\t\tl, x, y, i, segment, k, t, inv, x1, y1, x2, x3, x4, y2, y3, y4;\n\t\t\twhile (--j > -1) {\n\t\t\t\tsegment = rawPath[j];\n\t\t\t\tl = segment.length;\n\t\t\t\tfor (i = 6; i < l; i+=6) {\n\t\t\t\t\tx1 = segment[i];\n\t\t\t\t\ty1 = segment[i+1];\n\t\t\t\t\tx2 = segment[i+2] - x1;\n\t\t\t\t\ty2 = segment[i+3] - y1;\n\t\t\t\t\tx3 = segment[i+4] - x1;\n\t\t\t\t\ty3 = segment[i+5] - y1;\n\t\t\t\t\tx4 = segment[i+6] - x1;\n\t\t\t\t\ty4 = segment[i+7] - y1;\n\t\t\t\t\tk = samplesPerBezier;\n\t\t\t\t\twhile (--k > -1) {\n\t\t\t\t\t\tt = inc * k;\n\t\t\t\t\t\tinv = 1 - t;\n\t\t\t\t\t\tx = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t + x1;\n\t\t\t\t\t\ty = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t + y1;\n\t\t\t\t\t\tif (x > xMax) {\n\t\t\t\t\t\t\txMax = x;\n\t\t\t\t\t\t} else if (x < xMin) {\n\t\t\t\t\t\t\txMin = x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (y > yMax) {\n\t\t\t\t\t\t\tyMax = y;\n\t\t\t\t\t\t} else if (y < yMin) {\n\t\t\t\t\t\t\tyMin = y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\trawPath.centerX = (xMax + xMin) / 2;\n\t\t\trawPath.centerY = (yMax + yMin) / 2;\n\t\t\trawPath.left = xMin;\n\t\t\trawPath.width = (xMax - xMin);\n\t\t\trawPath.top = yMin;\n\t\t\trawPath.height = (yMax - yMin);\n\t\t\treturn (rawPath.size = (xMax - xMin) * (yMax - yMin));\n\t\t},\n\t\t_sortByComplexity = function(a, b) {\n\t\t\treturn b.length - a.length;\n\t\t},\n\t\t_sortBySize = function(a, b) {\n\t\t\tvar sizeA = a.size || _getSize(a),\n\t\t\t\tsizeB = b.size || _getSize(b);\n\t\t\treturn (Math.abs(sizeB - sizeA) < (sizeA + sizeB) / 20) ? (b.centerX - a.centerX) || (b.centerY - a.centerY) : sizeB - sizeA; //if the size is within 10% of each other, prioritize position from left to right, then top to bottom.\n\t\t},\n\t\t_offsetSegment = function(segment, shapeIndex) {\n\t\t\tvar a = segment.slice(0),\n\t\t\t\tl = segment.length,\n\t\t\t\twrap = l - 2,\n\t\t\t\ti, index;\n\t\t\tshapeIndex = shapeIndex | 0;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tindex = (i + shapeIndex) % wrap;\n\t\t\t\tsegment[i++] = a[index];\n\t\t\t\tsegment[i] = a[index+1];\n\t\t\t}\n\t\t},\n\t\t_getTotalMovement = function(sb, eb, shapeIndex, offsetX, offsetY) {\n\t\t\tvar l = sb.length,\n\t\t\t\td = 0,\n\t\t\t\twrap = l - 2,\n\t\t\t\tindex, i, x, y;\n\t\t\tshapeIndex *= 6;\n\t\t\tfor (i = 0; i < l; i += 6) {\n\t\t\t\tindex = (i + shapeIndex) % wrap;\n\t\t\t\ty = sb[index] - (eb[i] - offsetX);\n\t\t\t\tx = sb[index+1] - (eb[i+1] - offsetY);\n\t\t\t\td += _sqrt(x * x + y * y);\n\t\t\t}\n\t\t\treturn d;\n\t\t},\n\t\t_getClosestShapeIndex = function(sb, eb, checkReverse) { //finds the index in a closed cubic bezier array that's closest to the angle provided (angle measured from the center or average x/y).\n\t\t\tvar l = sb.length,\n\t\t\t\tsCenter = _getAverageXY(sb), //when comparing distances, adjust the coordinates as if the shapes are centered with each other.\n\t\t\t\teCenter = _getAverageXY(eb),\n\t\t\t\toffsetX = eCenter[0] - sCenter[0],\n\t\t\t\toffsetY = eCenter[1] - sCenter[1],\n\t\t\t\tmin = _getTotalMovement(sb, eb, 0, offsetX, offsetY),\n\t\t\t\tminIndex = 0,\n\t\t\t\tcopy, d, i;\n\t\t\tfor (i = 6; i < l; i += 6) {\n\t\t\t\td = _getTotalMovement(sb, eb, i / 6, offsetX, offsetY);\n\t\t\t\tif (d < min) {\n\t\t\t\t\tmin = d;\n\t\t\t\t\tminIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (checkReverse) {\n\t\t\t\tcopy = sb.slice(0);\n\t\t\t\t_reverseBezier(copy);\n\t\t\t\tfor (i = 6; i < l; i += 6) {\n\t\t\t\t\td = _getTotalMovement(copy, eb, i / 6, offsetX, offsetY);\n\t\t\t\t\tif (d < min) {\n\t\t\t\t\t\tmin = d;\n\t\t\t\t\t\tminIndex = -i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn minIndex / 6;\n\t\t},\n\t\t_getClosestAnchor = function(bezier, x, y) { //finds the x/y of the anchor that's closest to the provided x/y coordinate (returns an array, like [x, y]). The bezier should be the top-level type that contains an array for each segment.\n\t\t\tvar j = bezier.length,\n\t\t\t\tclosestDistance = 99999999999,\n\t\t\t\tclosestX = 0,\n\t\t\t\tclosestY = 0,\n\t\t\t\tb, dx, dy, d, i, l;\n\t\t\twhile (--j > -1) {\n\t\t\t\tb = bezier[j];\n\t\t\t\tl = b.length;\n\t\t\t\tfor (i = 0; i < l; i += 6) {\n\t\t\t\t\tdx = b[i] - x;\n\t\t\t\t\tdy = b[i+1] - y;\n\t\t\t\t\td = _sqrt(dx * dx + dy * dy);\n\t\t\t\t\tif (d < closestDistance) {\n\t\t\t\t\t\tclosestDistance = d;\n\t\t\t\t\t\tclosestX = b[i];\n\t\t\t\t\t\tclosestY = b[i+1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [closestX, closestY];\n\t\t},\n\t\t_getClosestSegment = function(bezier, pool, startIndex, sortRatio, offsetX, offsetY) { //matches the bezier to the closest one in a pool (array) of beziers, assuming they are in order of size and we shouldn't drop more than 20% of the size, otherwise prioritizing location (total distance to the center). Extracts the segment out of the pool array and returns it.\n\t\t\tvar l = pool.length,\n\t\t\t\tindex = 0,\n\t\t\t\tminSize = Math.min(bezier.size || _getSize(bezier), pool[startIndex].size || _getSize(pool[startIndex])) * sortRatio, //limit things based on a percentage of the size of either the bezier or the next element in the array, whichever is smaller.\n\t\t\t\tmin = 999999999999,\n\t\t\t\tcx = bezier.centerX + offsetX,\n\t\t\t\tcy = bezier.centerY + offsetY,\n\t\t\t\tsize, i, dx, dy, d;\n\t\t\tfor (i = startIndex; i < l; i++) {\n\t\t\t\tsize = pool[i].size || _getSize(pool[i]);\n\t\t\t\tif (size < minSize) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdx = pool[i].centerX - cx;\n\t\t\t\tdy = pool[i].centerY - cy;\n\t\t\t\td = _sqrt(dx * dx + dy * dy);\n\t\t\t\tif (d < min) {\n\t\t\t\t\tindex = i;\n\t\t\t\t\tmin = d;\n\t\t\t\t}\n\t\t\t}\n\t\t\td = pool[index];\n\t\t\tpool.splice(index, 1);\n\t\t\treturn d;\n\t\t},\n\t\t_equalizeSegmentQuantity = function(start, end, shapeIndex, map, fillSafe) { //returns an array of shape indexes, 1 for each segment.\n\t\t\tvar dif = end.length - start.length,\n\t\t\t\tlonger = dif > 0 ? end : start,\n\t\t\t\tshorter = dif > 0 ? start : end,\n\t\t\t\tadded = 0,\n\t\t\t\tsortMethod = (map === \"complexity\") ? _sortByComplexity : _sortBySize,\n\t\t\t\tsortRatio = (map === \"position\") ? 0 : (typeof(map) === \"number\") ? map : 0.8,\n\t\t\t\ti = shorter.length,\n\t\t\t\tshapeIndices = (typeof(shapeIndex) === \"object\" && shapeIndex.push) ? shapeIndex.slice(0) : [shapeIndex],\n\t\t\t\treverse = (shapeIndices[0] === \"reverse\" || shapeIndices[0] < 0),\n\t\t\t\tlog = (shapeIndex === \"log\"),\n\t\t\t\teb, sb, b, x, y, offsetX, offsetY;\n\t\t\tif (!shorter[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (longer.length > 1) {\n\t\t\t\tstart.sort(sortMethod);\n\t\t\t\tend.sort(sortMethod);\n\t\t\t\toffsetX = longer.size || _getTotalSize(longer); //ensures centerX and centerY are defined (used below).\n\t\t\t\toffsetX = shorter.size || _getTotalSize(shorter);\n\t\t\t\toffsetX = longer.centerX - shorter.centerX;\n\t\t\t\toffsetY = longer.centerY - shorter.centerY;\n\t\t\t\tif (sortMethod === _sortBySize) {\n\t\t\t\t\tfor (i = 0; i < shorter.length; i++) {\n\t\t\t\t\t\tlonger.splice(i, 0, _getClosestSegment(shorter[i], longer, i, sortRatio, offsetX, offsetY));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dif) {\n\t\t\t\tif (dif < 0) {\n\t\t\t\t\tdif = -dif;\n\t\t\t\t}\n\t\t\t\tif (longer[0].length > shorter[0].length) { //since we use shorter[0] as the one to map the origination point of any brand new fabricated segments, do any subdividing first so that there are more points to choose from (if necessary)\n\t\t\t\t\t_subdivideSegment(shorter[0], ((longer[0].length - shorter[0].length)/6) | 0);\n\t\t\t\t}\n\t\t\t\ti = shorter.length;\n\t\t\t\twhile (added < dif) {\n\t\t\t\t\tx = longer[i].size || _getSize(longer[i]); //just to ensure centerX and centerY are calculated which we use on the next line.\n\t\t\t\t\tb = _getClosestAnchor(shorter, longer[i].centerX, longer[i].centerY);\n\t\t\t\t\tx = b[0];\n\t\t\t\t\ty = b[1];\n\t\t\t\t\tshorter[i++] = [x, y, x, y, x, y, x, y];\n\t\t\t\t\tshorter.totalPoints += 8;\n\t\t\t\t\tadded++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i < start.length; i++) {\n\t\t\t\teb = end[i];\n\t\t\t\tsb = start[i];\n\t\t\t\tdif = eb.length - sb.length;\n\t\t\t\tif (dif < 0) {\n\t\t\t\t\t_subdivideSegment(eb, (-dif/6) | 0);\n\t\t\t\t} else if (dif > 0) {\n\t\t\t\t\t_subdivideSegment(sb, (dif/6) | 0);\n\t\t\t\t}\n\t\t\t\tif (reverse && fillSafe !== false && !sb.reversed) {\n\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t}\n\t\t\t\tshapeIndex = (shapeIndices[i] || shapeIndices[i] === 0) ? shapeIndices[i] : \"auto\";\n\t\t\t\tif (shapeIndex) {\n\t\t\t\t\t//if start shape is closed, find the closest point to the start/end, and re-organize the bezier points accordingly so that the shape morphs in a more intuitive way.\n\t\t\t\t\tif (sb.closed || (Math.abs(sb[0] - sb[sb.length - 2]) < 0.5 && Math.abs(sb[1] - sb[sb.length - 1]) < 0.5)) {\n\t\t\t\t\t\tif (shapeIndex === \"auto\" || shapeIndex === \"log\") {\n\t\t\t\t\t\t\tshapeIndices[i] = shapeIndex = _getClosestShapeIndex(sb, eb, (!i || fillSafe === false));\n\t\t\t\t\t\t\tif (shapeIndex < 0) {\n\t\t\t\t\t\t\t\treverse = true;\n\t\t\t\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t\t\t\t\tshapeIndex = -shapeIndex;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_offsetSegment(sb, shapeIndex * 6);\n\n\t\t\t\t\t\t} else if (shapeIndex !== \"reverse\") {\n\t\t\t\t\t\t\tif (i && shapeIndex < 0) { //only happens if an array is passed as shapeIndex and a negative value is defined for an index beyond 0. Very rare, but helpful sometimes.\n\t\t\t\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_offsetSegment(sb, (shapeIndex < 0 ? -shapeIndex : shapeIndex) * 6);\n\t\t\t\t\t\t}\n\t\t\t\t\t//otherwise, if it's not a closed shape, consider reversing it if that would make the overall travel less\n\t\t\t\t\t} else if (!reverse && (shapeIndex === \"auto\" && (Math.abs(eb[0] - sb[0]) + Math.abs(eb[1] - sb[1]) + Math.abs(eb[eb.length - 2] - sb[sb.length - 2]) + Math.abs(eb[eb.length - 1] - sb[sb.length - 1]) > Math.abs(eb[0] - sb[sb.length - 2]) + Math.abs(eb[1] - sb[sb.length - 1]) + Math.abs(eb[eb.length - 2] - sb[0]) + Math.abs(eb[eb.length - 1] - sb[1])) || (shapeIndex % 2))) {\n\t\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t\t\tshapeIndices[i] = -1;\n\t\t\t\t\t\treverse = true;\n\t\t\t\t\t} else if (shapeIndex === \"auto\") {\n\t\t\t\t\t\tshapeIndices[i] = 0;\n\t\t\t\t\t} else if (shapeIndex === \"reverse\") {\n\t\t\t\t\t\tshapeIndices[i] = -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (sb.closed !== eb.closed) { //if one is closed and one isn't, don't close either one otherwise the tweening will look weird (but remember, the beginning and final states will honor the actual values, so this only affects the inbetween state)\n\t\t\t\t\t\tsb.closed = eb.closed = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (log) {\n\t\t\t\t_log(\"shapeIndex:[\" + shapeIndices.join(\",\") + \"]\");\n\t\t\t}\n\t\t\tstart.shapeIndex = shapeIndices;\n\t\t\treturn shapeIndices;\n\t\t},\n\t\t_pathFilter = function(a, shapeIndex, map, precompile, fillSafe) {\n\t\t\tvar start = _stringToRawPath(a[0]),\n\t\t\t\tend = _stringToRawPath(a[1]);\n\t\t\tif (!_equalizeSegmentQuantity(start, end, (shapeIndex || shapeIndex === 0) ? shapeIndex : \"auto\", map, fillSafe)) {\n\t\t\t\treturn; //malformed path data or null target\n\t\t\t}\n\t\t\ta[0] = _rawPathToString(start);\n\t\t\ta[1] = _rawPathToString(end);\n\t\t\tif (precompile === \"log\" || precompile === true) {\n\t\t\t\t_log('precompile:[\"' + a[0] + '\",\"' + a[1] + '\"]');\n\t\t\t}\n\t\t},\n\t\t/*\n\t\t_buildPathFilter = function(shapeIndex, map, precompile) {\n\t\t\treturn (map || precompile || shapeIndex || shapeIndex === 0) ? function(a) {\n\t\t\t\t_pathFilter(a, shapeIndex, map, precompile);\n\t\t\t} : _pathFilter;\n\t\t},\n\t\t*/\n\t\t_offsetPoints = function(text, offset) {\n\t\t\tif (!offset) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tvar a = text.match(_numbersExp) || [],\n\t\t\t\tl = a.length,\n\t\t\t\ts = \"\",\n\t\t\t\tinc, i, j;\n\t\t\tif (offset === \"reverse\") {\n\t\t\t\ti = l-1;\n\t\t\t\tinc = -2;\n\t\t\t} else {\n\t\t\t\ti = (((parseInt(offset, 10) || 0) * 2 + 1) + l * 100) % l;\n\t\t\t\tinc = 2;\n\t\t\t}\n\t\t\tfor (j = 0; j < l; j += 2) {\n\t\t\t\ts += a[i-1] + \",\" + a[i] + \" \";\n\t\t\t\ti = (i + inc) % l;\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t//adds a certain number of points while maintaining the polygon/polyline shape (so that the start/end values can have a matching quantity of points to animate). Returns the revised string.\n\t\t_equalizePointQuantity = function(a, quantity) {\n\t\t\tvar tally = 0,\n\t\t\t\tx = parseFloat(a[0]),\n\t\t\t\ty = parseFloat(a[1]),\n\t\t\t\ts = x + \",\" + y + \" \",\n\t\t\t\tmax = 0.999999,\n\t\t\t\tnewPointsPerSegment, i, l, j, factor, nextX, nextY;\n\t\t\tl = a.length;\n\t\t\tnewPointsPerSegment = quantity * 0.5 / (l * 0.5 - 1);\n\t\t\tfor (i = 0; i < l-2; i += 2) {\n\t\t\t\ttally += newPointsPerSegment;\n\t\t\t\tnextX = parseFloat(a[i+2]);\n\t\t\t\tnextY = parseFloat(a[i+3]);\n\t\t\t\tif (tally > max) { //compare with 0.99999 instead of 1 in order to prevent rounding errors\n\t\t\t\t\tfactor = 1 / (Math.floor(tally) + 1);\n\t\t\t\t\tj = 1;\n\t\t\t\t\twhile (tally > max) {\n\t\t\t\t\t\ts += (x + (nextX - x) * factor * j).toFixed(2) + \",\" + (y + (nextY - y) * factor * j).toFixed(2) + \" \";\n\t\t\t\t\t\ttally--;\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts += nextX + \",\" + nextY + \" \";\n\t\t\t\tx = nextX;\n\t\t\t\ty = nextY;\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t_pointsFilter = function(a) {\n\t\t\tvar startNums = a[0].match(_numbersExp) || [],\n\t\t\t\tendNums = a[1].match(_numbersExp) || [],\n\t\t\t\tdif = endNums.length - startNums.length;\n\t\t\tif (dif > 0) {\n\t\t\t\ta[0] = _equalizePointQuantity(startNums, dif);\n\t\t\t} else {\n\t\t\t\ta[1] = _equalizePointQuantity(endNums, -dif);\n\t\t\t}\n\t\t},\n\t\t_buildPointsFilter = function(shapeIndex) {\n\t\t\treturn !isNaN(shapeIndex) ? function(a) {\n\t\t\t\t_pointsFilter(a);\n\t\t\t\ta[1] = _offsetPoints(a[1], parseInt(shapeIndex, 10));\n\t\t\t} : _pointsFilter;\n\t\t},\n\t\t_createPath = function(e, ignore) {\n\t\t\tvar path = _gsScope.document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"),\n\t\t\t\tattr = Array.prototype.slice.call(e.attributes),\n\t\t\t\ti = attr.length,\n\t\t\t\tname;\n\t\t\tignore = \",\" + ignore + \",\";\n\t\t\twhile (--i > -1) {\n\t\t\t\tname = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.\n\t\t\t\tif (ignore.indexOf(\",\" + name + \",\") === -1) {\n\t\t\t\t\tpath.setAttributeNS(null, name, attr[i].nodeValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn path;\n\t\t},\n\t\t_typeAttrs = {\n\t\t\trect:\"rx,ry,x,y,width,height\",\n\t\t\tcircle:\"r,cx,cy\",\n\t\t\tellipse:\"rx,ry,cx,cy\",\n\t\t\tline:\"x1,x2,y1,y2\"\n\t\t},\n\t\t_attrToObj = function(e, attrs) {\n\t\t\tvar props = attrs ? attrs.split(\",\") : [],\n\t\t\t\tobj = {},\n\t\t\t\ti = props.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tobj[props[i]] = +e.getAttribute(props[i]) || 0;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\t_convertToPath = function(e, swap) {\n\t\t\tvar type = e.tagName.toLowerCase(),\n\t\t\t\tcirc = 0.552284749831,\n\t\t\t\tdata, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;\n\t\t\tif (type === \"path\" || !e.getBBox) {\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tpath = _createPath(e, \"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points\");\n\t\t\tattr = _attrToObj(e, _typeAttrs[type]);\n\t\t\tif (type === \"rect\") {\n\t\t\t\tr = attr.rx;\n\t\t\t\try = attr.ry;\n\t\t\t\tx = attr.x;\n\t\t\t\ty = attr.y;\n\t\t\t\tw = attr.width - r * 2;\n\t\t\t\th = attr.height - ry * 2;\n\t\t\t\tif (r || ry) { //if there are rounded corners, render cubic beziers\n\t\t\t\t\tx2 = x + r * (1 - circ);\n\t\t\t\t\tx3 = x + r;\n\t\t\t\t\tx4 = x3 + w;\n\t\t\t\t\tx5 = x4 + r * circ;\n\t\t\t\t\tx6 = x4 + r;\n\t\t\t\t\ty2 = y + ry * (1 - circ);\n\t\t\t\t\ty3 = y + ry;\n\t\t\t\t\ty4 = y3 + h;\n\t\t\t\t\ty5 = y4 + ry * circ;\n\t\t\t\t\ty6 = y4 + ry;\n\t\t\t\t\tdata = \"M\" + x6 + \",\" + y3 + \" V\" + y4 + \" C\" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(\",\") + \"z\";\n\t\t\t\t} else {\n\t\t\t\t\tdata = \"M\" + (x + w) + \",\" + y + \" v\" + h + \" h\" + (-w) + \" v\" + (-h) + \" h\" + w + \"z\";\n\t\t\t\t}\n\n\t\t\t} else if (type === \"circle\" || type === \"ellipse\") {\n\t\t\t\tif (type === \"circle\") {\n\t\t\t\t\tr = ry = attr.r;\n\t\t\t\t\trycirc = r * circ;\n\t\t\t\t} else {\n\t\t\t\t\tr = attr.rx;\n\t\t\t\t\try = attr.ry;\n\t\t\t\t\trycirc = ry * circ;\n\t\t\t\t}\n\t\t\t\tx = attr.cx;\n\t\t\t\ty = attr.cy;\n\t\t\t\trcirc = r * circ;\n\t\t\t\tdata = \"M\" + (x+r) + \",\" + y + \" C\" + [x+r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(\",\") + \"z\";\n\t\t\t} else if (type === \"line\") {\n\t\t\t\tdata = \"M\" + attr.x1 + \",\" + attr.y1 + \" L\" + attr.x2 + \",\" + attr.y2; //previously, we just converted to \"Mx,y Lx,y\" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.\n\t\t\t} else if (type === \"polyline\" || type === \"polygon\") {\n\t\t\t\tpoints = (e.getAttribute(\"points\") + \"\").match(_numbersExp) || [];\n\t\t\t\tx = points.shift();\n\t\t\t\ty = points.shift();\n\t\t\t\tdata = \"M\" + x + \",\" + y + \" L\" + points.join(\",\");\n\t\t\t\tif (type === \"polygon\") {\n\t\t\t\t\tdata += \",\" + x + \",\" + y + \"z\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath.setAttribute(\"d\", _rawPathToString(path._gsRawPath = _stringToRawPath(data)));\n\t\t\tif (swap && e.parentNode) {\n\t\t\t\te.parentNode.insertBefore(path, e);\n\t\t\t\te.parentNode.removeChild(e);\n\t\t\t}\n\n\t\t\treturn path;\n\t\t},\n\t\t_parseShape = function(shape, forcePath, target) {\n\t\t\tvar isString = typeof(shape) === \"string\",\n\t\t\t\te, type;\n\t\t\tif (!isString || _selectorExp.test(shape) || (shape.match(_numbersExp) || []).length < 3) {\n\t\t\t\te = isString ? TweenLite.selector(shape) : (shape && shape[0]) ? shape : [shape]; //allow array-like objects like jQuery objects.\n\t\t\t\tif (e && e[0]) {\n\t\t\t\t\te = e[0];\n\t\t\t\t\ttype = (e.nodeName + \"\").toUpperCase();\n\t\t\t\t\tif (forcePath && type !== \"PATH\") { //if we were passed an element (or selector text for an element) that isn't a path, convert it.\n\t\t\t\t\t\te = _convertToPath(e, false);\n\t\t\t\t\t\ttype = \"PATH\";\n\t\t\t\t\t}\n\t\t\t\t\tshape = e.getAttribute(type === \"PATH\" ? \"d\" : \"points\") || \"\";\n\t\t\t\t\tif (e === target) { //if the shape matches the target element, the user wants to revert to the original which should have been stored in the data-original attribute\n\t\t\t\t\t\tshape = e.getAttributeNS(null, \"data-original\") || shape;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log(\"WARNING: invalid morph to: \" + shape);\n\t\t\t\t\tshape = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn shape;\n\t\t},\n\t\t//adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\n\t\t_populateSmoothData = function(rawPath, tolerance) {\n\t\t\tvar j = rawPath.length,\n\t\t\t\tlimit = 0.2 * (tolerance || 1),\n\t\t\t\tsmooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;\n\t\t\twhile (--j > -1) {\n\t\t\t\tsegment = rawPath[j];\n\t\t\t\tisSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n\t\t\t\tsmoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n\t\t\t\tisSmooth.length = 4;\n\t\t\t\tl = segment.length - 2;\n\t\t\t\tfor (i = 6; i < l; i += 6) {\n\t\t\t\t\tx = segment[i] - segment[i - 2];\n\t\t\t\t\ty = segment[i + 1] - segment[i - 1];\n\t\t\t\t\tx2 = segment[i + 2] - segment[i];\n\t\t\t\t\ty2 = segment[i + 3] - segment[i + 1];\n\t\t\t\t\ta = _atan2(y, x);\n\t\t\t\t\ta2 = _atan2(y2, x2);\n\t\t\t\t\tsmooth = (Math.abs(a - a2) < limit);\n\t\t\t\t\tif (smooth) {\n\t\t\t\t\t\tsmoothData[i - 2] = a;\n\t\t\t\t\t\tsmoothData[i + 2] = a2;\n\t\t\t\t\t\tsmoothData[i - 1] = _sqrt(x * x + y * y);\n\t\t\t\t\t\tsmoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\t\t}\n\t\t\t\t\tisSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n\t\t\t\t}\n\t\t\t\t//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\t\t\t\tif (segment[l] === segment[0] && segment[l+1] === segment[1]) {\n\t\t\t\t\tx = segment[0] - segment[l-2];\n\t\t\t\t\ty = segment[1] - segment[l-1];\n\t\t\t\t\tx2 = segment[2] - segment[0];\n\t\t\t\t\ty2 = segment[3] - segment[1];\n\t\t\t\t\ta = _atan2(y, x);\n\t\t\t\t\ta2 = _atan2(y2, x2);\n\t\t\t\t\tif (Math.abs(a - a2) < limit) {\n\t\t\t\t\t\tsmoothData[l-2] = a;\n\t\t\t\t\t\tsmoothData[2] = a2;\n\t\t\t\t\t\tsmoothData[l-1] = _sqrt(x * x + y * y);\n\t\t\t\t\t\tsmoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\t\t\tisSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn rawPath;\n\t\t},\n\t\t_parseOriginFactors = function(v) {\n\t\t\tvar a = v.trim().split(\" \"),\n\t\t\t\tx = (v.indexOf(\"left\") >= 0) ? 0 : (v.indexOf(\"right\") >= 0) ? 100 : isNaN(parseFloat(a[0])) ? 50 : parseFloat(a[0]),\n\t\t\t\ty = (v.indexOf(\"top\") >= 0) ? 0 : (v.indexOf(\"bottom\") >= 0) ? 100 : isNaN(parseFloat(a[1])) ? 50 : parseFloat(a[1]);\n\t\t\treturn {x:x / 100, y:y / 100};\n\t\t},\n\t\t_shortAngle = function(dif) {\n\t\t\treturn (dif !== dif % _PI) ? dif + ((dif < 0) ? _2PI : -_2PI) : dif;\n\t\t},\n\t\t_morphMessage = \"Use MorphSVGPlugin.convertToPath(elementOrSelectorText) to convert to a path before morphing.\",\n\n\n\n\t\tMorphSVGPlugin = _gsScope._gsDefine.plugin({\n\t\t\tpropName: \"morphSVG\",\n\t\t\tAPI: 2,\n\t\t\tglobal: true,\n\t\t\tversion: \"0.9.1\",\n\t\t\toverwriteProps: [\"morphSVG\"],\n\n\t\t\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\t\tinit: function(target, value, tween, index) {\n\t\t\t\tvar cs = target.nodeType ? window.getComputedStyle(target) : {},\n\t\t\t\t\tfill = cs.fill + \"\",\n\t\t\t\t\tfillSafe = !(fill === \"none\" || (fill.match(_numbersExp) || [])[3] === \"0\" || cs.fillRule === \"evenodd\"),\n\t\t\t\t\torigins = (value.origin || \"50 50\").split(\",\"),\n\t\t\t\t\ttype, p, pt, shape, isPoly, shapeIndex, map, startSmooth, endSmooth, start, end, i, j, l, startSeg, endSeg, precompiled, sData, eData, originFactors, useRotation, offset;\n\t\t\t\tif (typeof(value) === \"function\") {\n\t\t\t\t\tvalue = value(index, target);\n\t\t\t\t}\n\t\t\t\ttype = (target.nodeName + \"\").toUpperCase();\n\t\t\t\tisPoly = (type === \"POLYLINE\" || type === \"POLYGON\");\n\t\t\t\tif (type !== \"PATH\" && !isPoly && !value.prop) {\n\t\t\t\t\t_log(\"WARNING: cannot morph a <\" + type + \"> element. \" + _morphMessage);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tp = (type === \"PATH\") ? \"d\" : \"points\";\n\t\t\t\tif (typeof(value) === \"string\" || value.getBBox || value[0]) {\n\t\t\t\t\tvalue = {shape:value};\n\t\t\t\t}\n\t\t\t\tif (!value.prop && typeof(target.setAttribute) !== \"function\") {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tshape = _parseShape(value.shape || value.d || value.points || \"\", (p === \"d\"), target);\n\t\t\t\tif (isPoly && _commands.test(shape)) {\n\t\t\t\t\t_log(\"WARNING: a <\" + type + \"> cannot accept path data. \" + _morphMessage);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tshapeIndex = (value.shapeIndex || value.shapeIndex === 0) ? value.shapeIndex : \"auto\";\n\t\t\t\tmap = value.map || MorphSVGPlugin.defaultMap;\n\t\t\t\tthis._prop = value.prop;\n\t\t\t\tthis._render = value.render || MorphSVGPlugin.defaultRender;\n\t\t\t\tthis._apply = (\"updateTarget\" in value) ? value.updateTarget : MorphSVGPlugin.defaultUpdateTarget;\n\t\t\t\tthis._rnd = Math.pow(10, isNaN(value.precision) ? 2 : +value.precision);\n\t\t\t\tthis._tween = tween;\n\t\t\t\tif (shape) {\n\t\t\t\t\tthis._target = target;\n\t\t\t\t\tprecompiled = (typeof(value.precompile) === \"object\");\n\t\t\t\t\tstart = this._prop ? target[this._prop] : target.getAttribute(p);\n\t\t\t\t\tif (!this._prop && !target.getAttributeNS(null, \"data-original\")) {\n\t\t\t\t\t\ttarget.setAttributeNS(null, \"data-original\", start); //record the original state in a data-original attribute so that we can revert to it later.\n\t\t\t\t\t}\n\t\t\t\t\tif (p === \"d\" || this._prop) {\n\t\t\t\t\t\tstart = _stringToRawPath(precompiled ? value.precompile[0] : start);\n\t\t\t\t\t\tend = _stringToRawPath(precompiled ? value.precompile[1] : shape);\n\t\t\t\t\t\tif (!precompiled && !_equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe)) {\n\t\t\t\t\t\t\treturn false; //malformed path data or null target\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.precompile === \"log\" || value.precompile === true) {\n\t\t\t\t\t\t\t_log('precompile:[\"' + _rawPathToString(start) + '\",\"' + _rawPathToString(end) + '\"]');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuseRotation = (value.type || MorphSVGPlugin.defaultType) !== \"linear\";\n\n\t\t\t\t\t\tif (useRotation) {\n\t\t\t\t\t\t\tstart = _populateSmoothData(start, value.smoothTolerance);\n\t\t\t\t\t\t\tend = _populateSmoothData(end, value.smoothTolerance   );\n\t\t\t\t\t\t\tif (!start.size) {\n\t\t\t\t\t\t\t\t_getTotalSize(start); //adds top/left/width/height values\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!end.size) {\n\t\t\t\t\t\t\t\t_getTotalSize(end);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toriginFactors = _parseOriginFactors(origins[0]);\n\t\t\t\t\t\t\tthis._origin = start.origin = {x:start.left + originFactors.x * start.width, y:start.top + originFactors.y * start.height};\n\t\t\t\t\t\t\tif (origins[1]) {\n\t\t\t\t\t\t\t\toriginFactors = _parseOriginFactors(origins[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._eOrigin = {x:end.left + originFactors.x * end.width, y:end.top + originFactors.y * end.height};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._rawPath = target._gsRawPath =  start;\n\n\t\t\t\t\t\tj = start.length;\n\t\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\t\tstartSeg = start[j];\n\t\t\t\t\t\t\tendSeg = end[j];\n\t\t\t\t\t\t\tstartSmooth = startSeg.isSmooth || [];\n\t\t\t\t\t\t\tendSmooth = endSeg.isSmooth || [];\n\t\t\t\t\t\t\tl = startSeg.length;\n\t\t\t\t\t\t\t_lastLinkedAnchor = 0; //reset; we use _lastLinkedAnchor in the _tweenRotation() method to help make sure that close points don't get ripped apart and rotate opposite directions. Typically we want to go the shortest direction, but if the previous anchor is going a different direction, we override this logic (within certain thresholds)\n\t\t\t\t\t\t\tfor (i = 0; i < l; i+=2) {\n\t\t\t\t\t\t\t\tif (endSeg[i] !== startSeg[i] || endSeg[i+1] !== startSeg[i+1]) {\n\t\t\t\t\t\t\t\t\tif (useRotation) {\n\t\t\t\t\t\t\t\t\t\tif (startSmooth[i] && endSmooth[i]) { //if BOTH starting and ending values are smooth (meaning control points have basically the same slope), interpolate the rotation and length instead of the coordinates (this is what makes things smooth).\n\t\t\t\t\t\t\t\t\t\t\tsData = startSeg.smoothData;\n\t\t\t\t\t\t\t\t\t\t\teData = endSeg.smoothData;\n\t\t\t\t\t\t\t\t\t\t\toffset = i + ((i === l - 4) ? 7 - l : 5); //helps us accommodate wrapping (like if the end and start anchors are identical and the control points are smooth).\n\t\t\t\t\t\t\t\t\t\t\tthis._controlPT = {_next:this._controlPT, i:i, j:j, l1s:sData[i+1], l1c:eData[i+1] - sData[i+1], l2s:sData[offset], l2c:eData[offset] - sData[offset]};\n\t\t\t\t\t\t\t\t\t\t\tpt = this._tweenRotation(startSeg, endSeg, i+2);\n\t\t\t\t\t\t\t\t\t\t\tthis._tweenRotation(startSeg, endSeg, i, pt);\n\t\t\t\t\t\t\t\t\t\t\tthis._tweenRotation(startSeg, endSeg, offset-1, pt);\n\t\t\t\t\t\t\t\t\t\t\ti+=4;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tthis._tweenRotation(startSeg, endSeg, i);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis._addTween(startSeg, i, startSeg[i], endSeg[i]);\n\t\t\t\t\t\t\t\t\t\tpt = this._addTween(startSeg, i+1, startSeg[i+1], endSeg[i+1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt = this._addTween(target, \"setAttribute\", target.getAttribute(p) + \"\", shape + \"\", \"morphSVG\", false, p, _buildPointsFilter(shapeIndex));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (useRotation) {\n\t\t\t\t\t\tthis._addTween(this._origin, \"x\", this._origin.x, this._eOrigin.x);\n\t\t\t\t\t\tpt = this._addTween(this._origin, \"y\", this._origin.y, this._eOrigin.y);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pt) {\n\t\t\t\t\t\tthis._overwriteProps.push(\"morphSVG\");\n\t\t\t\t\t\tpt.end = shape;\n\t\t\t\t\t\tpt.endProp = p;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tset: function(ratio) {\n\t\t\t\tvar rawPath = this._rawPath,\n\t\t\t\t\tcontrolPT = this._controlPT,\n\t\t\t\t\tanchorPT = this._anchorPT,\n\t\t\t\t\trnd = this._rnd,\n\t\t\t\t\ttarget = this._target,\n\t\t\t\t\ts, space, easeInOut, pt, segment, l, angle, i, j, x, y, sin, cos, offset;\n\t\t\t\tthis._super.setRatio.call(this, ratio);\n\t\t\t\tif (ratio === 1 && this._apply) {\n\t\t\t\t\tpt = this._firstPT;\n\t\t\t\t\twhile (pt) {\n\t\t\t\t\t\tif (pt.end) {\n\t\t\t\t\t\t\tif (this._prop) {\n\t\t\t\t\t\t\t\ttarget[this._prop] = pt.end;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget.setAttribute(pt.endProp, pt.end); //make sure the end value is exactly as specified (in case we had to add fabricated points during the tween)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt = pt._next;\n\t\t\t\t\t}\n\t\t\t\t} else if (rawPath) {\n\n\t\t\t\t\t//rotationally position the anchors\n\t\t\t\t\twhile (anchorPT) {\n\t\t\t\t\t\tangle = anchorPT.sa + ratio * anchorPT.ca;\n\t\t\t\t\t\tl = anchorPT.sl + ratio * anchorPT.cl;    //length\n\t\t\t\t\t\tanchorPT.t[anchorPT.i] = this._origin.x + _cos(angle) * l;\n\t\t\t\t\t\tanchorPT.t[anchorPT.i + 1] = this._origin.y + _sin(angle) * l;\n\t\t\t\t\t\tanchorPT = anchorPT._next;\n\t\t\t\t\t}\n\n\t\t\t\t\t//smooth out the control points\n\t\t\t\t\teaseInOut = ratio < 0.5 ? 2 * ratio * ratio : (4 - 2 * ratio) * ratio - 1;\n\t\t\t\t\twhile (controlPT) {\n\t\t\t\t\t\ti = controlPT.i;\n\t\t\t\t\t\tsegment = rawPath[controlPT.j];\n\t\t\t\t\t\toffset = i + ((i === segment.length - 4) ? 7 - segment.length : 5); //accommodates wrapping around of smooth points, like if the start and end anchors are on top of each other and their handles are smooth.\n\t\t\t\t\t\tangle = _atan2(segment[offset] - segment[i+1], segment[offset-1] - segment[i]); //average the angles\n\t\t\t\t\t\tsin = _sin(angle);\n\t\t\t\t\t\tcos = _cos(angle);\n\t\t\t\t\t\tx = segment[i+2];\n\t\t\t\t\t\ty = segment[i+3];\n\t\t\t\t\t\tl = controlPT.l1s + easeInOut * controlPT.l1c;    //length\n\t\t\t\t\t\tsegment[i] = x - cos * l;\n\t\t\t\t\t\tsegment[i+1] = y - sin * l;\n\t\t\t\t\t\tl = controlPT.l2s + easeInOut * controlPT.l2c;\n\t\t\t\t\t\tsegment[offset-1] = x + cos * l;\n\t\t\t\t\t\tsegment[offset] = y + sin * l;\n\t\t\t\t\t\tcontrolPT = controlPT._next;\n\t\t\t\t\t}\n\n\t\t\t\t\ttarget._gsRawPath = rawPath;\n\n\t\t\t\t\tif (this._apply) {\n\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\tspace = \" \";\n\t\t\t\t\t\tfor (j = 0; j < rawPath.length; j++) {\n\t\t\t\t\t\t\tsegment = rawPath[j];\n\t\t\t\t\t\t\tl = segment.length;\n\t\t\t\t\t\t\ts += \"M\" + (((segment[0] * rnd) | 0) / rnd) + space + (((segment[1] * rnd) | 0) / rnd) + \" C\";\n\t\t\t\t\t\t\tfor (i = 2; i < l; i++) { //this is actually faster than just doing a join() on the array, possibly because the numbers have so many decimal places\n\t\t\t\t\t\t\t\ts += (((segment[i] * rnd) | 0) / rnd) + space;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this._prop) {\n\t\t\t\t\t\t\ttarget[this._prop] = s;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget.setAttribute(\"d\", s);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._render && rawPath) {\n\t\t\t\t\tthis._render.call(this._tween, rawPath, target);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\tMorphSVGPlugin.prototype._tweenRotation = function(start, end, i, linkedPT) {\n\t\tvar so = this._origin,              //starting origin\n\t\t\teo = this._eOrigin,             //ending origin\n\t\t\tdx = start[i] - so.x,\n\t\t\tdy = start[i+1] - so.y,\n\t\t\td = _sqrt(dx * dx + dy * dy),   //length from starting origin to starting point\n\t\t\tsa = _atan2(dy, dx),\n\t\t\tangleDif, short;\n\t\tdx = end[i] - eo.x;\n\t\tdy = end[i+1] - eo.y;\n\t\tangleDif = _atan2(dy, dx) - sa;\n\t\tshort = _shortAngle(angleDif);\n\t\t//in the case of control points, we ALWAYS link them to their anchor so that they don't get torn apart and rotate the opposite direction. If it's not a control point, we look at the most recently linked point as long as they're within a certain rotational range of each other.\n\t\tif (!linkedPT && _lastLinkedAnchor && Math.abs(short + _lastLinkedAnchor.ca) < _angleMin) {\n\t\t\tlinkedPT = _lastLinkedAnchor;\n\t\t}\n\t\treturn (this._anchorPT = _lastLinkedAnchor = {\n\t\t\t_next:this._anchorPT,\n\t\t\tt:start,\n\t\t\tsa:sa,                              //starting angle\n\t\t\tca:(linkedPT && short * linkedPT.ca < 0 && Math.abs(short) > _angleMax) ? angleDif : short,  //change in angle\n\t\t\tsl:d,                               //starting length\n\t\t\tcl:_sqrt(dx * dx + dy * dy) - d,    //change in length\n\t\t\ti:i\n\t\t});\n\t};\n\n\tMorphSVGPlugin.pathFilter = _pathFilter;\n\tMorphSVGPlugin.pointsFilter = _pointsFilter;\n\tMorphSVGPlugin.getTotalSize = _getTotalSize;\n\tMorphSVGPlugin.subdivideRawBezier = MorphSVGPlugin.subdivideSegment = _subdivideSegment;\n\tMorphSVGPlugin.rawPathToString = _rawPathToString;\n\tMorphSVGPlugin.defaultType = \"linear\";\n\tMorphSVGPlugin.defaultUpdateTarget = true;\n\tMorphSVGPlugin.defaultMap = \"size\";\n\tMorphSVGPlugin.stringToRawPath = MorphSVGPlugin.pathDataToRawBezier = function(data) {\n\t\treturn _stringToRawPath(_parseShape(data, true));\n\t};\n\tMorphSVGPlugin.equalizeSegmentQuantity = _equalizeSegmentQuantity;\n\n\tMorphSVGPlugin.convertToPath = function(targets, swap) {\n\t\tif (typeof(targets) === \"string\") {\n\t\t\ttargets = TweenLite.selector(targets);\n\t\t}\n\t\tvar a = (!targets || targets.length === 0) ? [] : (targets.length && targets[0] && targets[0].nodeType) ? Array.prototype.slice.call(targets, 0) : [targets],\n\t\t\ti = a.length;\n\t\twhile (--i > -1) {\n\t\t\ta[i] = _convertToPath(a[i], (swap !== false));\n\t\t}\n\t\treturn a;\n\t};\n\n\tMorphSVGPlugin.pathDataToBezier = function(data, vars) { //converts SVG path data into an array of {x, y} objects that can be plugged directly into a bezier tween. You can optionally pass in a 2D matrix like [a, b, c, d, tx, ty] containing numbers that should transform each point.\n\t\tvar bezier = _stringToRawPath(_parseShape(data, true))[0] || [],\n\t\t\tprefix = 0,\n\t\t\ta, i, l, matrix, offsetX, offsetY, bbox, e;\n\t\tvars = vars || {};\n\t\te = vars.align || vars.relative;\n\t\tmatrix = vars.matrix || [1,0,0,1,0,0];\n\t\toffsetX = vars.offsetX || 0;\n\t\toffsetY = vars.offsetY || 0;\n\t\tif (e === \"relative\" || e === true) {\n\t\t\toffsetX -= bezier[0] * matrix[0] + bezier[1] * matrix[2];\n\t\t\toffsetY -= bezier[0] * matrix[1] + bezier[1] * matrix[3];\n\t\t\tprefix = \"+=\";\n\t\t} else {\n\t\t\toffsetX += matrix[4];\n\t\t\toffsetY += matrix[5];\n\t\t\tif (e) {\n\t\t\t\te = (typeof(e) === \"string\") ? TweenLite.selector(e) : (e && e[0]) ? e : [e]; //allow array-like objects like jQuery objects.\n\t\t\t\tif (e && e[0]) {\n\t\t\t\t\tbbox = e[0].getBBox() || {x:0, y:0};\n\t\t\t\t\toffsetX -= bbox.x;\n\t\t\t\t\toffsetY -= bbox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ta = [];\n\t\tl = bezier.length;\n\t\tif (matrix && matrix.join(\",\") !== \"1,0,0,1,0,0\") {\n\t\t\tfor (i = 0; i < l; i+=2) {\n\t\t\t\ta.push({x:prefix + (bezier[i] * matrix[0] + bezier[i+1] * matrix[2] + offsetX), y:prefix + (bezier[i] * matrix[1] + bezier[i+1] * matrix[3] + offsetY)});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = 0; i < l; i+=2) {\n\t\t\t\ta.push({x:prefix + (bezier[i] + offsetX), y:prefix + (bezier[i+1] + offsetY)});\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t};\n\n\n\n}); if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); }\n//export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)\n(function(name) {\n\t\"use strict\";\n\tvar getGlobal = function() {\n\t\treturn (_gsScope.GreenSockGlobals || _gsScope)[name];\n\t};\n\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\trequire(\"../TweenLite.js\");\n\t\tmodule.exports = getGlobal();\n\t} else if (typeof(define) === \"function\" && define.amd) { //AMD\n\t\tdefine([\"TweenLite\"], getGlobal);\n\t}\n}(\"MorphSVGPlugin\"));"],"file":"MorphSVGPlugin.js"}